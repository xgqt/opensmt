(set-logic QF_LIA)
(declare-fun itp1 (Int Int Int ) Bool)
(declare-fun itp2 (Int Int Int ) Bool)
(declare-fun x1 () Int)
(declare-fun y1 () Int)
(declare-fun z1 () Int)
(declare-fun x2 () Int)
(declare-fun y2 () Int)
(declare-fun z2 () Int)
(declare-fun |x#0| () Int)
(declare-fun |x#1| () Int)
(declare-fun |x#2| () Int)
(declare-fun |x#0__s##0| () Int)
(declare-fun |x#1__s##0| () Int)
(declare-fun |x#2__s##0| () Int)
(declare-fun |x#0__t| () Int)
(declare-fun |x#1__t| () Int)
(declare-fun |x#2__t| () Int)
(declare-fun |x#3| () Int)
(declare-fun |x#4| () Int)
(declare-fun |x#5| () Int)
(declare-fun |x#3__s##0| () Int)
(declare-fun |x#4__s##0| () Int)
(declare-fun |x#5__s##0| () Int)
(declare-fun |x#3__t| () Int)
(declare-fun |x#4__t| () Int)
(declare-fun |x#5__t| () Int)
(declare-fun |x#3##0| () Int)
(declare-fun |x#4##0| () Int)
(declare-fun |x#5##0| () Int)
(declare-fun |x#3##1| () Int)
(declare-fun |x#4##1| () Int)
(declare-fun |x#5##1| () Int)
(declare-fun |x#0##0| () Int)
(declare-fun |x#1##0| () Int)
(declare-fun |x#2##0| () Int)
(declare-fun |x#0##1| () Int)
(declare-fun |x#1##1| () Int)
(declare-fun |x#2##1| () Int)
(declare-fun |x#3##2| () Int)
(declare-fun |x#4##2| () Int)
(declare-fun |x#5##2| () Int)
(declare-fun |x#0##2| () Int)
(declare-fun |x#1##2| () Int)
(declare-fun |x#2##2| () Int)
(declare-fun .frame1 () Bool)
(declare-fun .frame2 () Bool)
(declare-fun .frame3 () Bool)
(declare-fun .frame4 () Bool)
(declare-fun .frame5 () Bool)
(declare-fun .frame6 () Bool)
(declare-fun .frame7 () Bool)
(declare-fun .frame8 () Bool)
(declare-fun .frame9 () Bool)
(declare-fun .frame10 () Bool)
(assert
(let ((?def0 (and (<= (- 2) (+ |x#1##1| (* (- 1) |x#1##2|)))
 (<= (- 4) (+ (* (- 1) |x#2##1|) |x#2##2|))
)))
(let ((?def1 (and (<= (- 2) (+ |x#1##0| (* (- 1) |x#1##1|)))
 (<= (- 4) (+ (* (- 1) |x#2##0|) |x#2##1|))
)))
(let ((?def2 (and ?def1 ?def0)))

?def2
))))
(push 1)
(assert
(let ((?def0 (and (<= (- 2) (+ |x#1##1| (* (- 1) |x#1##2|)))
 (<= (- 4) (+ (* (- 1) |x#2##1|) |x#2##2|))
)))
(let ((?def1 (and (<= (- 2) (+ |x#1##0| (* (- 1) |x#1##1|)))
 (<= (- 4) (+ (* (- 1) |x#2##0|) |x#2##1|))
)))
(let ((?def2 (and ?def1 ?def0)))

?def2
))))
(push 1)
(assert
(let ((?def0 (or (<= (- 1) (+ |x#1##1| (* (- 1) |x#1##2|))) (<= 2 (+ |x#2##1| (* (- 1) |x#2##2|))))))
(let ((?def1 (or (<= 1 (+ (* (- 1) |x#0##1|) |x#0##2|)) (<= 0 (+ (* (- 1) |x#2##1|) |x#2##2|)))))
(let ((?def2 (and ?def1 ?def0)))
(let ((?def3 (or (<= (- 1) (+ |x#1##0| (* (- 1) |x#1##1|))) (<= 2 (+ |x#2##0| (* (- 1) |x#2##1|))))))
(let ((?def4 (or (<= 1 (+ (* (- 1) |x#0##0|) |x#0##1|)) (<= 0 (+ (* (- 1) |x#2##0|) |x#2##1|)))))
(let ((?def5 (and ?def4 ?def3)))
(let ((?def6 (and ?def5 ?def2)))

?def6
))))))))
(push 1)
(assert
(let ((?def0 (or (<= (- 2) (+ (* (- 1) |x#2##1|) |x#2##2|)) (<= 2 (+ (* (- 1) |x#0##1|) |x#0##2|)))))
(let ((?def1 (and (<= (- 2) (+ |x#1##1| (* (- 1) |x#1##2|)))
 ?def0)))
(let ((?def2 (or (<= (- 2) (+ (* (- 1) |x#2##0|) |x#2##1|)) (<= 2 (+ (* (- 1) |x#0##0|) |x#0##1|)))))
(let ((?def3 (and (<= (- 2) (+ |x#1##0| (* (- 1) |x#1##1|)))
 ?def2)))
(let ((?def4 (and ?def3 ?def1)))

?def4
))))))
(push 1)
(assert
(let ((?def0 (or (<= 5 (* (- 1) |x#2##2|)) (<= 4 |x#1##2|) (<= (- 1) (* (- 1) |x#0##2|)))))
(let ((?def1 (and ?def0 (<= 2 |x#0##2|)
)))
(let ((?def2 (and ?def1 (<= (- 2) (* (- 1) |x#0##2|))
)))
(let ((?def3 (and (<= 0 |x#2##0|)
 (<= 0 (* (- 1) |x#2##0|))
)))
(let ((?def4 (and (<= 0 |x#1##0|)
 (<= 0 (* (- 1) |x#1##0|))
)))
(let ((?def5 (and (<= 0 |x#0##0|)
 (<= 0 (* (- 1) |x#0##0|))
)))
(let ((?def6 (and ?def5 ?def4 ?def3)))
(let ((?def7 (and ?def6 ?def2)))

?def7
)))))))))
(check-sat)
(exit)